#version 430 core
 
layout(binding = 0, rgba32f) uniform image2D framebuffer;
 
uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;
 
uniform samplerCube skybox;
uniform sampler2D diffuseTexture;
uniform sampler2D ssao;
uniform sampler2D shadowMap;
 
uniform vec4 sphere;
uniform vec4 cube;
uniform vec4 mirror;
uniform vec4 customModel;
uniform vec4 lightPos;
uniform mat4 lightProjection;
 
uniform float gScattering;
uniform float scatteringAmount;
uniform float time; 
 
struct box {
    vec3 min;
    vec3 max;
};
 
struct triangle {
  vec4 v1;
  vec4 v2;
  vec4 v3;
  vec4 n1;
  vec4 n2;
  vec4 n3;
};
 
#define NUM_BOXES 3
const box boxes[NUM_BOXES] = {
  /* The ground */
  {vec3(-50.0, -2.5-0.1, -50.0), vec3(50.0, -2.5, 50.0)},
  {vec3(-1, 20.0, 20-1), vec3(1, 22.0, 20+1)},
  {vec3(0), vec3(0)}
};
 
uniform int sphereTriangleSize;
layout(std430, binding = 1) buffer SphereTriangles {
    triangle sphereTris[];
};
 
#define MAX_SCENE_BOUNDS 10000.0
 
 
struct hitinfo {
    vec2 uv;
    float t;
    float t2;
    vec3 n;
    vec3 p;
 
    int type;
    int refl;
    int reflOrder;
    int refrType;
    vec4 e;
    vec4 color;
    vec4 lighting;
    vec3 entryPoint;
    vec3 exitPoint;
    float extraPath;
    vec3 pTIR;
    bool firstTIR;
    bool hasShadows;
};
 
struct RayHit
{
    vec3 position;
    float distance;
    vec3 normal;
};
 
const float PI = 3.14159265359;
const float infinity = 1./0.;
 
int iPixel;
int numberPerPixel;
 
float ambientOcclusion;
 
float comone;
 
RayHit CreateRayHit(){
    RayHit hit;
    hit.position = vec3(0.0f, 0.0f, 0.0f);
    hit.distance = infinity;
    hit.normal = vec3(0.0f, 0.0f, 0.0f);
    return hit;
}
 
//effects
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
 
float smin(float a, float b){
    float k = 0.1;
    float h = clamp(0.5+0.5*(b-a)/k,0.0,1.0);
    return mix(b,a,h)-k*h*(1.0-h); 
}
 
float FresnelReflectAmount (float n1, float n2, vec3 normal, vec3 incident)
{
        // Schlick aproximation
        float OBJECT_REFLECTIVITY = 0.01;
        float r0 = (n1-n2) / (n1+n2);
        r0 *= r0;
        float cosX = -dot(normal, incident);
        if (n1 > n2)
        {
            float n = n1/n2;
            float sinT2 = n*n*(1.0-cosX*cosX);
            // Total internal reflection
            if (sinT2 > 1.0)
                return 1.0;
            cosX = sqrt(1.0-sinT2);
        }
        float x = 1.0-cosX;
        float ret = r0+(1.0-r0)*x*x*x*x*x;
 
        // adjust reflect multiplier for object reflectivity
        ret = (OBJECT_REFLECTIVITY + (1.0-OBJECT_REFLECTIVITY) * ret);
        return ret;
}
 
const float DitherMatrix[16] = { 0.0f,0.5f,0.125f,0.625f, 0.75f,0.22f,0.875f,0.375f, 0.1875f, 0.6875f, 0.0625f, 0.5625f, 0.9375f, 0.4375f, 0.8125f, 0.3125f };
 
float near = 0.1; 
float far  = 1000.0; 
  
float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    //return (2.0 * near * far) / (far + near - z * (far - near));    
 
    float linDepth = (2.0 * near) / (far + near - depth * (far - near));
    return linDepth;
    
}
 
//noise
 
float hash(float n) { return fract(sin(n) * 1e4); }
float hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }
 
float random(vec2 co){
    return fract(sin(dot(co.xy,vec2(12.9898, 78.233))) * 43758.5453123);
}
 
float noise(float x) {
    float i = floor(x);
    float f = fract(x);
    float u = f * f * (3.0 - 2.0 * f);
    return mix(hash(i), hash(i + 1.0), u);
}
 
float noise(vec2 x) {
    vec2 i = floor(x);
    vec2 f = fract(x);
 
    // Four corners in 2D of a tile
    float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));
 
    // Simple 2D lerp using smoothstep envelope between the values.
    // return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),
    //            mix(c, d, smoothstep(0.0, 1.0, f.x)),
    //            smoothstep(0.0, 1.0, f.y)));
 
    // Same code, with the clamps in smoothstep and common subexpressions
    // optimized away.
    vec2 u = f * f * (3.0 - 2.0 * f);
    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}
 
 
//uv coordinates - Texture processing
vec2 uvSphere(vec3 p){
 
    float u = 0.5 + atan(p.z,p.x)/(2*PI);
    float v = 0.5 - asin(p.y)/PI;
 
    return vec2(u,v);
}
 
vec2 uvCube(vec3 p) {
 
    float absX = abs(p.x);
    float absY = abs(p.y);
    float absZ = abs(p.z);
 
    bool isXPositive = p.x > 0 ? true : false;
    bool isYPositive = p.y > 0 ? true : false;
    bool isZPositive = p.z > 0 ? true : false;
 
    float maxAxis, uc, vc;
 
    if (isXPositive && absX >= absY && absX >= absZ) {
        maxAxis = absX;
        uc = -p.z;
        vc = p.y;
    }
    if (!isXPositive && absX >= absY && absX >= absZ) {
        maxAxis = absX;
        uc = p.z;
        vc = p.y;
    }
    if (isYPositive && absY >= absX && absY >= absZ) {
        maxAxis = absY;
        uc = p.x;
        vc = -p.z;
    }
    if (!isYPositive && absY >= absX && absY >= absZ) {
        maxAxis = absY;
        uc = p.x;
        vc = p.z;
    }
    if (isZPositive && absZ >= absX && absZ >= absY) {
        maxAxis = absZ;
        uc = p.x;
        vc = p.y;
    }
    if (!isZPositive && absZ >= absX && absZ >= absY) {
        maxAxis = absZ;
        uc = -p.x;
        vc = p.y;
    }
    float u = 0.5 * (uc / maxAxis + 1.0);
    float v = 0.5 * (vc / maxAxis + 1.0);
    return vec2(u, v);
}
 
vec2 uvPlane(vec3 p, vec3 n){
 
    vec3 u = normalize(vec3(n.y, -n.x, 0));
    vec3 v = cross(n,u);
 
    float u_coord = dot(u, p);
    float v_coord = dot(v, p);
 
    return vec2(u_coord,v_coord);
 
}
 
 
float intersectTriangle(vec3 origin, vec3 ray, vec3 v0, vec3 v1, vec3 v2) {
    vec3 edge1 = v1 - v0;
    vec3 edge2 = v2 - v0;
    vec3 pvec = cross(ray, edge2);
    float det = dot(edge1, pvec);
    if (det <= 0)
        return -1.0;
    vec3 tvec = origin - v0;
    float u = dot(tvec, pvec);
    if (u < 0.0 || u > det)
        return -1.0;
    vec3 qvec = cross(tvec, edge1);
    float v = dot(ray, qvec);
    if (v < 0.0 || u + v > det)
        return -1.0;
    float invDet = 1.0 / det;
    float t = dot(edge2, qvec) * invDet;
    return t;
}
 
bool intersectTriangles(vec3 origin, vec3 dir, inout hitinfo info) {
    bool found = false;
    hitinfo tinfo;
    //tinfo.t = MAX_SCENE_BOUNDS;
 
    vec3 offset = vec3(0,-2.5,-30);
    uint numTris = sphereTris.length();
    for (int i = 0; i < numTris; i++) {
        
        const triangle tri = sphereTris[i];
        
        float t = intersectTriangle(origin, dir, tri.v1.xyz+customModel.xyz+offset, tri.v2.xyz+customModel.xyz+offset, tri.v3.xyz+customModel.xyz+offset);
        if (t >= 0.0 && t < info.t) {
            info.t = t;
            //info.t = tinfo.t;
            info.n = normalize(tri.n1.xyz);
            found = true;
            
        }
    }
    
 
    return found;
}
 
bool IntersectSphere(vec3 origin,vec3 dir, inout hitinfo info, vec4 pos){
 
    bool found = false;
    // Calculate distance along the ray where the sphere is intersected
    vec3 d = origin - pos.xyz;
    float b = dot(dir, d);
    float c = dot(d, d) - pos.w * pos.w;
   
    float t = b*b-c;
    if (t >= 0.0)
    {
        float t = -b-sqrt(t);
        //float t2 = -b+sqrt(t);
        
        //t = t1<t2 ? t1 : t2; 
        found = (t>=0.0) && (t < info.t);
        if(found)info.t = t;
        //info.t = t;
        //found = (t1>=0.0) && (t1< info.t);
        //t = t1; 
        //info.t = t1; 
    
    }
 
    return found;
}
 
bool intersectSpheres(vec3 origin, vec3 dir, inout hitinfo info){
    bool found = false;
    hitinfo tinfo;
    tinfo.t = info.t;
    
 
    vec3 offset = vec3(0, -2.5, -30);
    for(int i=0;i<5;i++){
        vec4 spherePos = sphere+vec4(vec3(i*5,0,0),0);
        spherePos.xyz += offset;
        spherePos.y -= 18;
        spherePos.w = sphere.w*2;
        //hitinfo tinfo;
        bool so = IntersectSphere(origin, dir, tinfo,spherePos);
        
        if(so){
                 
                info.t = tinfo.t;
                //info.t = smin(info.t,tinfo.t); 
                vec3 po = origin+dir*info.t; 
                info.p = po;
                info.n = normalize(po-spherePos.xyz); 
                found = true; 
        }    
         
    }
 
    return found; 
}
 
 
bool intersectBox(vec3 origin, vec3 dir, const box b, inout vec2 lambda, inout hitinfo info) {
    vec3 tMin = (b.min - origin) / dir;
    vec3 tMax = (b.max - origin) / dir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    vec2 ts = vec2(tNear, tFar);
    
    bool found = false; 
    found = (ts.x>=0.0) && (ts.x<=ts.y) && ts.x<info.t;
    //if(tNear<info.t && found)info.t = tNear;
    lambda = ts;
    return found;
}
 
bool intersectBoxes(inout vec3 origin, inout vec3 dir, inout hitinfo info) {
    bool found = false;
    vec2 lambda;
    for (int i = 0; i < NUM_BOXES; i++) {
 
        box pos = boxes[i];
        
        if(i==1){
            vec3 offset = cube.xyz+vec3(0,-2.5,-30);
            pos.min = offset-cube.w*0.5;
            pos.max = offset+cube.w*0.5;
        }
        if(i==2){
            vec3 offset = mirror.xyz+vec3(0,-2.5,-30);
            pos.min.x = offset.x;
            pos.min.yz = offset.yz-mirror.w*0.5;
            pos.max.yz = offset.yz+mirror.w*0.5;
            pos.max.x = pos.min.x+0.1;
        }
        //vec2 lambda = intersectBox(origin, dir, pos);
        //if (lambda.x > 0.0 && lambda.x < lambda.y && lambda.x < smallest) {
        bool bo = intersectBox(origin, dir, pos, lambda,info);
        if(bo){
            info.t = lambda.x;
            found = true;
            info.type = 0;
            if(i==1)info.type = 1;
            if(i==2)info.type = 4;
            
        
        }
        //break;
        
    }
    return found;
}
 
float dot2( in vec3 v ) { return dot(v,v); }
 
bool intersectCappedCone( in vec3  origin, in vec3  dir, 
                  in vec3  pa, in vec3  pb, 
                  in float ra, in float rb, inout hitinfo info )
{
    
    //pa: center point of top, pb: center point of bottom
    //ra: radius of top, rb: radius of bottom
 
    vec3  ba = pb - pa;
    vec3  oa = origin - pa;
    vec3  ob = dir - pb;
    
    float m0 = dot(ba,ba);
    float m1 = dot(oa,ba);
    float m2 = dot(ob,ba); 
    float m3 = dot(dir,ba);
 
    float t, t2; 
     
    //caps
    if( m1<0.0 ) { 
        if( dot2(oa*m3-dir*m1)<(ra*ra*m3*m3) ){
            t = -m1/m3;
            info.t = t;
            info.t2 = info.t;
            info.n = -ba*inversesqrt(m0);
            return true;//vec4(-m1/m3,-ba*inversesqrt(m0)); 
        }
    }
    else if( m2>0.0 ) { 
        if( dot2(ob*m3-dir*m2)<(rb*rb*m3*m3) ){
            t = -m2/m3;
            info.t = t;
            info.t2 = info.t;
            info.n = ba*inversesqrt(m0);
            return true;
            //return vec4(-m2/m3, ba*inversesqrt(m0)); 
        }
    }
    
    // body
    float m4 = dot(dir,oa);
    float m5 = dot(oa,oa);
    float rr = ra - rb;
    float hy = m0 + rr*rr;
    
    float k2 = m0*m0    - m3*m3*hy;
    float k1 = m0*m0*m4 - m1*m3*hy + m0*ra*(rr*m3*1.0        );
    float k0 = m0*m0*m5 - m1*m1*hy + m0*ra*(rr*m1*2.0 - m0*ra);
    
    float h = k1*k1 - k2*k0;
    if( h<0.0 ) return false;//vec4(-1.0);
 
    t = (-k1-sqrt(h))/k2;
     
    float y = m1 + t*m3;
    if( y>0.0 && y<m0) 
    {
        
            info.n = normalize(m0*(m0*(oa+t*dir)+rr*ba*ra)-ba*hy*y);
            //info.p = origin+dir*t; 
            info.t = t;
            return true; 
        //info.t2 = t2;     
        //info.n = normalize(m0*(m0*(oa+t*dir)+rr*ba*ra)-ba*hy*y);
        //info.p = origin+dir*t;
        
        //return vec4(t, normalize(m0*(m0*(oa+t*rd)+rr*ba*ra)-ba*hy*y));
    } 
    
    return false;//vec4(-1.0);
}
 
float sdSphere(vec3 p, float s){
    return length(p)-s; 
}
 
float sdBox( vec3 p, vec3 b )
{
  vec3 d = abs(p) - b;
  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}
 
float map(vec3 p){
 
    //info.type = -1;
    //info.hasShadows = false;
    float minH = MAX_SCENE_BOUNDS;
     
    /*for(int i=1;i<NUM_BOXES;i++){
        
       box pos = boxes[i];
       
       if(i==1){
            vec3 offset = cube.xyz+vec3(0,-2.5,-30);
            pos.min = offset-cube.w*0.5;
            pos.max = offset+cube.w*0.5;
        }
        if(i==2){
            vec3 offset = mirror.xyz+vec3(0,-2.5,-30);
            pos.min.x = offset.x;
            pos.min.yz = offset.yz-mirror.w*0.5;
            pos.max.yz = offset.yz+mirror.w*0.5;
            pos.max.x = pos.min.x+0.1;
        }
       
       vec3 b = abs(pos.max-pos.min)*0.5;
       vec3 c = pos.min+b*0.5;
       float h = sdBox(p-c,b);
       minH = min(h,minH); 
    }*/
   
    for(int i=0;i<5;i++){
        vec3 offset = vec3(0,-2.5,-30);
        vec4 spherePos = sphere+vec4(vec3(i*5,0,0),0);
        spherePos.xyz += offset;
        spherePos.y -= 18;
        spherePos.w = sphere.w*2;
        float h = sdSphere(p-spherePos.xyz,spherePos.w);
        if(h<minH)minH = h; 
    } 
     
    return minH; 
}
 
vec4 trace(inout vec3 origin, inout vec3 dir, out bool hitAnything, inout hitinfo i) {
    
    vec4 colorRes = vec4(0);
    hitAnything = false;
    //i.t = MAX_SCENE_BOUNDS;
    i.type = -1; 
    i.hasShadows = false; 
    
    if (intersectBoxes(origin,dir, i)) {
        hitAnything = true;
        vec3 po = origin+dir*i.t;
        vec2 boxUV = vec2(0);
        i.p = po; 
 
        if(i.type==1){
            i.n = normalize(po-cube.xyz-vec3(0,-2.5,-30));
            boxUV = uvCube(i.n);
            colorRes = texture(diffuseTexture, boxUV);
            
        }
        else if(i.type==4){
            boxUV = uvPlane(po, vec3(0,1,0))*0.1;
            i.n = vec3(-1,0,0);
            if(origin.x>po.x)i.n *= -1;
        }
        else{
            boxUV = uvPlane(po, vec3(0,1,0))*0.1;
            i.n = vec3(0,1,0);
            if(origin.y<po.y)i.n *= -1;
            i.type = 0;
            
        }
        i.hasShadows = true; 
        
        colorRes = texture(diffuseTexture,boxUV);
        
    }
      
    if(intersectTriangles(origin,dir,i)){
        hitAnything = true;
 
        vec3 po = origin+dir*i.t;
        i.p = po;
        i.type = 5;
        colorRes = vec4(0,0,1,1);
    }
     
     
     
    if(intersectSpheres(origin,dir,i)){
        hitAnything = true;
 
        //vec3 po = origin+dir*i.t;
        //i.p = po;
        i.type = 2;
        //i.n = normalize(po-sphere.xyz-vec3(0,-2.5,-30));
        vec2 uvsphr = uvSphere(i.n)*10;
        //colorRes = texture(diffuseTexture,uvsphr);
        colorRes = vec4(i.n*0.5+0.5,0);//vec4(1,0,0,1);
        //i.hasShadows = true;
        i.hasShadows = true;
        
    }
    //i.t = MAX_SCENE_BOUNDS;
    
    //light ball 
    if(IntersectSphere(origin, dir, i, vec4(lightPos.xyz,0.3))){
       hitAnything = true;
       vec3 po = origin+dir*i.t;
       i.p = po;
       i.n = normalize(po-lightPos.xyz);
       //colorRes = vec4(i.n*0.5+0.5,0);
       colorRes = vec4(0.99,0.94,0.5,1);
       i.type = 6;
       i.hasShadows = false; 
    }
     
    if(hitAnything == false)i.type = 3;
     
    i.color = colorRes; 
 
    return colorRes;
  
}
 
int delta[][3] = {
    { -1, -1, 1 },
    { 1, -1, 1 },
    { 1, -1, -1 },
    { -1, -1, -1 },
    { -1, 1, 1 },
    { 1, 1, 1 },
    { 1, 1, -1 },
    { -1, 1, -1 }
};
 
vec4 BlinnPhong(vec3 origin, vec3 dir, vec3 normal, vec3 fragPos, vec3 lightColor, vec3 lightPosition)
{
    normal = normalize(normal);
    // diffuse
    vec3 lightDir = normalize(lightPosition - fragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // specular
    vec3 viewDir = normalize(origin - fragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    //spec = pow(max(dot(normal, reflectDir), 0.0), 64.0);
    spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
    vec3 specular = spec * lightColor;    
    // simple attenuation
    //float max_distance = 1.5;
    float distance = length(lightPosition - fragPos);
    float attenuation = 1.0 / (distance*distance);
    
   // attenuation *= 10;//40.2;
    diffuse *= attenuation;
    specular *= attenuation;
    
     
    return vec4(diffuse + specular,0);
}
 
vec3 swap(inout float etai, inout float etat){
 
    float t1 = etai;
    etai = etat;
    etat = t1;
 
    return vec3(0);
}
 
vec4 shade(inout vec3 origin, inout vec3 dir, in bool hitAnything, inout hitinfo i){
    vec4 finalColor;
    
    if(i.type == 3){ 
       //i.type = 3;
       i.e = vec4(vec3(1),1);
       finalColor = texture(skybox, dir);
       i.lighting = vec4(1);
       return finalColor; 
    } 
    vec3 inDir = dir;
    vec3 inPoint = i.p;
    vec4 ambient = vec4(0.7);
    //i.lighting = vec4(vec3(0),1); 
    //i.lighting += BlinnPhong(origin, dir, i.n, i.p, vec3(100), lightPos.xyz);
    //i.lighting += ambient; 
    
    vec4 albedo = vec4(0.8);
    vec4 specular = vec4(vec3(0.6),1);
    vec4 transmittance = vec4(vec3(0.9),1);
    if(i.type!= 0 && i.type!= 1 && i.type != 2 && i.type != 5 && i.type!= 6 && i.type!=7){
        origin = i.p;// + i.n * 0.01;
        
        dir = reflect(dir, i.n);
 
        origin = origin + dir*0.001;
        i.e *= specular;
    }
     
    if(i.type == 1|| i.type == 5){
        float ior = 1.125;
        float air = 1.00029;
        if(i.type==5)ior = 1.1921; 
        if(i.refl==1){
            origin = i.p+dir*0.001;
            
            //if(n1/n2*sin(theta1)>1) cannot refract 
            float fresnel; 
             
            if(i.reflOrder==1){
                fresnel = FresnelReflectAmount(air,ior,i.n,dir);
                if(fresnel<1){
                    dir = refract(dir, i.n, air/ior);
                    i.reflOrder = -1;
                    i.entryPoint = i.p;
                }
                else {
                    dir = reflect(dir,i.n);
                    i.pTIR = origin;
                    i.p -= dir*0.001;
                    i.extraPath += length(origin-i.p); 
                } 
            }
            else{
                fresnel = FresnelReflectAmount(ior,air,i.n,dir); 
                if(fresnel<1){
                    dir = refract(dir, i.n,ior/air);
                    i.reflOrder = 1; 
                    i.exitPoint = i.p;
                  
                }
                else {
                    dir = reflect(dir,i.n);
                    i.pTIR = origin;
                    i.p = i.p-dir*0.001;
                    i.extraPath += length(origin-i.p); 
                } 
            }
             
            if(fresnel<1)i.e *= transmittance;//(1-fresnel); 
        }
        else{
            origin = i.p+i.n*0.001;
            //dir = reflect(dir, i.n);
            float fresnel = FresnelReflectAmount(air,ior,i.n,dir);
            dir = reflect(dir, i.n);
            i.e *= specular;//fresnel;
            i.exitPoint = i.p;
        }
    }
 
    //i.lighting += BlinnPhong(origin, dir, i.n, i.p,vec3(1)); 
    float dif = clamp(dot(i.n,normalize(lightPos.xyz)),0,1); 
    finalColor = vec4(vec3(0),1);
    //i.lighting += BlinnPhong(origin, dir, i.n, i.p, vec3(1),lightPos.xyz); 
    //finalColor = vec4(vec3(0),1)*dif;
    //finalColor = clamp(dot(i.n, lightPos.xyz)*(-1),0,1)*lightPos.w*albedo;
 
    return finalColor;
}
 
bool vany(vec3 v){
    if(v.x != 0 || v.y != 0 || v.z != 0)return true;
    return false; 
}
 
float sphDensity( vec3  origin, vec3  dir,   // ray origin, ray direction
                  vec3  sc, float sr,   // sphere center, sphere radius
                  float dbuffer, inout hitinfo info )       // depth buffer
{
    // dbuffer = MAX_SCENE_BOUNDS
    // only mix current color with volume color if result >0.0
    // normalize the problem to the canonical sphere
    float ndbuffer = dbuffer / sr;
    hitinfo tinfo;
    tinfo.t = MAX_SCENE_BOUNDS;
    //tinfo.t2 = MAX_SCENE_BOUNDS;
     
    bool co = intersectCappedCone(origin,dir, lightPos.xyz, lightPos.xyz-vec3(0,-4,0),0.01,5,tinfo); 
    
    /*vec3  rc = (origin - sc)/sr;
    
    // find intersection with sphere
    float b = dot(dir,rc);
    float c = dot(rc,rc) - 1.0;
    float h = b*b - c;
 
    // not intersecting
    if( h<0.0 ) return 0.0;
    
    h = sqrt( h );
    
    //return h*h*h;
 
    float t1 = -b - h;
    float t2 = -b + h;*/
 
    if(co==false)return 0.0;
    
    if(tinfo.t>0.0 && tinfo.t<info.t){
        info.t = tinfo.t;
        info.p = origin+dir*info.t;
        info.n = tinfo.n;
        info.type = 7;
        return 1.0;
    } 
    //info.t = tinfo.t;
    //info.t2 = tinfo.t2;
     
    return 0.0; 
    float t1 = tinfo.t;
    float t2 = tinfo.t2;
    vec3 rc = (origin-sc)/sr;
    float b = dot(dir,rc);
    float c = dot(rc,rc)-1.0;
 
    // not visible (behind camera or behind ndbuffer)
    if( t2<0.0 || t1>ndbuffer ) return 0.0; 
     
    // clip integration segment from camera to ndbuffer
    t1 = max( t1, 0.0 );
    t2 = min( t2, ndbuffer );
 
    // analytical integration of an inverse squared density
    float i1 = -(c*t1 + b*t1*t1 + t1*t1*t1/3.0);
    float i2 = -(c*t2 + b*t2*t2 + t2*t2*t2/3.0);
    float res = (i2-i1)*(3.0/4.0);  
    return res;
}
 
float absorptionTau = 0.003;
float scatteringTau = 0.03;
 
vec3 absorptionTransmittance(float dist) {
 
    //float absorptionTau = 0.03;
    vec3 absorptionColor = vec3(0.5);
    //float scatteringTau = 0.3;
    return absorptionColor*exp(-dist*(absorptionTau+scatteringTau));
}
 
 
float phaseFunctionHenyeyGreenstein(vec3 inDir, vec3 outDir) {
    float anisotropy = 0;
    float cosAngle = dot(inDir, outDir) / (length(inDir)*length(outDir));
    float nom = 1 - anisotropy*anisotropy;
    float denom = 4 * PI * pow(1 + anisotropy*anisotropy - 2*anisotropy*cosAngle, 1.5);
    return nom/denom;
}
 
float GetAngle(vec3 v1, vec3 v2){
    return acos(dot(v1,v2)/(length(v1)*length(v2)))*(180./PI); 
}
 
 
vec4 rayMarchedLighting(vec3 origin, vec3 dir, in hitinfo info, float shadowsVar){
   
    vec3 result = vec3(0);
    
    if(info.type==3)info.p = lightPos.xyz+dir*30;
    
    vec3 camToFrag = info.p-origin;
    float scatteringZFar = MAX_SCENE_BOUNDS;
    int scatteringSamples = 30;
    vec3 scatteringColor = vec3(1);
    if(length(camToFrag)>scatteringZFar){
        camToFrag = normalize(origin-info.p);
    }
    vec3 deltaStep = camToFrag/(scatteringSamples+1);
    vec3 FragToCamNorm = normalize(origin-info.p);
    vec3 x = origin;
    
    // Randomize the sampling points along the ray to trade flickering
    // for plain noise
    float rand = random(info.p.xy+info.p.z);
    x += (deltaStep*rand);
 
     
     
    //float shadowsVar = 0.0;
    float lightIntensity = 70000;
    vec3 lightColor = vec3(0.99,0.95,0.5);
    for(int i = 0; i < scatteringSamples; ++i) {
        float visibility = 1.0 - shadowsVar;
        vec3 lightToX = x - lightPos.xyz;
        float angle = abs(GetAngle(lightToX,vec3(0,1,0)));
        float angle2 = abs(GetAngle(lightToX, vec3(1,0,0)));
        if(angle>135 || angle<45)visibility = 0.0;
        if(angle2>20 || angle2<0)visibility = 0.0;
        
        float lightDist = length(lightToX);
        if(lightDist>10.0)visibility = 0.0;
        float omega = 4 * PI * lightDist * lightDist;
        vec3 Lin = absorptionTransmittance(lightDist) * visibility * lightColor * lightIntensity / omega;
        vec3 Li = Lin * scatteringTau * scatteringColor * phaseFunctionHenyeyGreenstein(normalize(lightToX), FragToCamNorm);
        result += Li * absorptionTransmittance(distance(x,origin)) * length(deltaStep);
        x += deltaStep;
    }
 
    return vec4(result,0);
}
 
vec4 castRay(vec3 origin, vec3 direction, inout hitinfo info, inout bool shadowTraced, inout vec4 shadowRes, inout vec4 volumeColor){
    bool hitAnything;// = false;
    bool lightTraced = false;
    vec4 pColor = vec4(0);
    vec3 lightColor = vec3(0.7);
    float shadowsVar = 0;
    vec4 rayEnergy = vec4(1);
    info.e = rayEnergy;
    vec4 accLighting = vec4(0);
    vec3 oEye = origin;
    vec4 finalColor = vec4(1);
    info.reflOrder = 1;
    info.color = vec4(0);
    info.extraPath = 0;
    info.firstTIR = true;
    info.lighting = vec4(vec3(0),1);
    float ph = 1e10;
   
    vec3 startPos = origin;
    vec3 startDir = direction;
    bool volumeBool = true; 
    info.t = MAX_SCENE_BOUNDS; 
    for(int i=0;i<8;i++){
        info.t = MAX_SCENE_BOUNDS;
        //info.t2 = MAX_SCENE_BOUNDS;
        //info.e = rayEnergy;
         
        vec4 color = trace(origin, direction, hitAnything, info);
        shadowTraced = false; 
        if(info.hasShadows){
          hitinfo pShadowInfo = info;
          pShadowInfo.t = MAX_SCENE_BOUNDS; 
          float res = 1.0;
          bool hasShadows = false;
          vec3 shadowPos = info.p+info.n*0.01;//info.p+info.n*0.01;
          vec3 shadowDir = normalize(lightPos.xyz-shadowPos);
          trace(shadowPos,shadowDir, hasShadows, pShadowInfo);
          vec3 mShadowPos; 
          float k = 2;
          float tmin = 0.1;
          float tmax = 100;
          float t = tmin;
          for(int j=0;j<32;j++){
              //shadowInfo.t = MAX_SCENE_BOUNDS;
              //mShadowPos = shadowPos+shadowDir*t;
              float h = map(shadowPos+shadowDir*t); 
              float y = h*h/(2*ph);
              if(j==0)y = 0.0;
              float d = sqrt(h*h-y*y);
              //res = min(res, k*(h/t));
              res = min(res, k*d/max(0.0,t-y));
              ph = h;
              
              t += h;
              if(res < 0.0001 || t>tmax)break; 
               
          }
          float pes = clamp(res,0.0,1.0);
          //shadowsVar = pes;
          if(hitAnything && pShadowInfo.type!=4){  
              shadowTraced = true;
              shadowRes = vec4(0);
              shadowsVar = pes;
              //volumeBool = true;
           } 
           
           //volumeColor += rayMarchedLighting(origin,direction, info, 0);
           
        }
        
        if(volumeBool){ 
            volumeColor += rayMarchedLighting(origin,direction, info, shadowsVar);
            volumeBool = false;
        }
        else{
           volumeColor += rayMarchedLighting(origin,direction,info,0.0);
           volumeBool = true; 
        } 
        info.lighting = BlinnPhong(origin, direction, info.n, info.p, vec3(100), lightPos.xyz);
   
        vec4 pE = info.e; 
        //finalColor = shade(origin,direction, hitAnything,info);
        //origin = origin + direction*0.01;
        vec4 shadeColor = pE*shade(origin,direction,hitAnything, info);
        //vec4 lightingColor = pow(info.lighting*(1-shadowsVar),vec4(1./2.2));
         
        if(info.type!=6)info.color += shadeColor; 
        //info.color *= pow(info.lighting, vec4(1./2.2)); 
         
        //if(info.type!=6)info.color += volumeColor; 
         
        //if(info.type!=6)info.color = mix(info.color, (1-shadowsVar)*info.color*pow(info.lighting,vec4(1./2.2)),0.9);
        //if(info.type!=6)info.color = (1-shadowsVar)*info.color*info.lighting;
        if(shadowTraced==false && info.type!=6)info.color *= info.lighting; 
        else if(info.type!=6 && info.type!=3)info.color *= (info.lighting*(shadowsVar)); 
        //else if(info.type!=6 && info.type!=3)info.color*= mix(info.lighting,vec4(vec3(shadowsVar),1),0.4); 
        if(volumeBool==false){
            volumeColor *= info.lighting;
           
            //volumeBool = false; 
        } 
         
        //float h = sphDensity(startPos,startDir, lightPos.xyz, 3, MAX_SCENE_BOUNDS, info);
        //if(h>0.0)info.color = mix(info.color,vec4(0.99,0.94,0.5,1),h);  
        //if(info.type != 1 && info.type != 4)break; 
        if(!vany(info.e.xyz))break; 
        
    }
    
    return info.color;
}
 
#define GScattering 0
#define ScatteringAmount 1
 
float ComputeScattering(float lightDotView)
{
    float scattering = 1.0f - (GScattering * GScattering);
    scattering /= (4.0 * PI * pow(abs(1.0f + (GScattering * GScattering) - (2.0f * GScattering * lightDotView)), 1.5f));
    return scattering * ScatteringAmount;
}
 
 
#define NUM_SAMPLES 10
 
float ditherValue;
 
float GetDitherValue(ivec2 pix)
{
    int x = int(pix.x % 4);
    int y = int(pix.y % 4);
    return DitherMatrix[x + (y * 4)];
}
 
 
 
vec4 volumetricLighting(vec3 origin, vec3 direction){
 
    vec3 lightDirection = vec3(0,-1,0);
 
    float rayLength = MAX_SCENE_BOUNDS;
    float stepLength = rayLength/NUM_SAMPLES;
    vec3 Step = direction*stepLength;
 
    vec3 currentPosition = origin;
    vec3 accumulateScattering = vec3(0);
    vec3 lightColor = vec3(0.7);
  
    for(int i=0;i<NUM_SAMPLES;i++){
    
        //lightDirection = -normalize(lightPos.xyz-currentPosition);
 
        vec4 LightProjection = vec4(currentPosition, 1)*lightProjection;
        LightProjection.y = -LightProjection.y;
        LightProjection.xyz /= LightProjection.w;
 
        vec2 shadowCoordinates = LightProjection.xy* 0.5f + 0.5f;
 
        vec3 coords = currentPosition-lightPos.xyz;
        float ShadowValue = texture(shadowMap,shadowCoordinates).r;//length(coords);//texture(shadowMap, coords).r;
 
        if (ShadowValue > LightProjection.z)
        {
            accumulateScattering += ComputeScattering(dot(lightDirection, direction)) * lightColor;
        }
 
        currentPosition += Step *ditherValue;
 
    }
 
    accumulateScattering /= NUM_SAMPLES;
 
    return vec4(accumulateScattering, 1);
}
 
 
 
 
 
layout (local_size_x = 32, local_size_y = 32) in;
 
//type: 0: plane,1: cube, 2: sphere, 3: sky, 4: mirror, 5: triangles, 6: light
 
void main(void) {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }
    vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
    vec2 pixel = vec2(pix);
    vec3 dir = normalize(mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x));
 
    ambientOcclusion = texture(ssao, pixel).x;
    
    //ditherValue = GetDitherValue(pix);
 
    bool hitAnything;
    hitinfo info;
    
    
    vec4 result = vec4(0);
    vec4 rayEnergy = vec4(1);
    info.e = rayEnergy;
    
 
    vec3 origin = eye;
    vec3 direction = dir;
    vec4 finalColor = vec4(1);
    vec4 shadowRes = vec4(0);
    bool shadowTraced = false;
    vec4 pColor = vec4(0);
    vec3 lightColor = vec3(0.7);
    float shadowsVar = 0;
    vec4 blinnPhongLighting;
    vec4 accLighting = vec4(0);
 
    //vec4 volumeColor = volumetricLighting(origin, direction);
 
    bool lightTraced = false;
    vec3 oEye = eye;
    //reflection
    info.refl = 0;
    vec4 volumeColor = vec4(0);
    finalColor = castRay(origin, direction, info, shadowTraced, shadowRes, volumeColor);
 
    if(shadowTraced)finalColor = mix(shadowRes, finalColor, 0.5); 
    hitinfo info2;
    info2.e = rayEnergy;
    info2.refl = 1;
    shadowRes = vec4(0);
    shadowTraced = false;
    info2.refrType = 0;
    volumeColor = vec4(0);
    vec4 refractionColor = castRay(origin, direction, info2, shadowTraced, shadowRes, volumeColor); 
   
    vec3 absorbColor = vec3(1)-vec3(0.01,0.01,0.8+info2.extraPath*0.02); 
    //refractionColor.xyz *= exp(-absorbColor*(length(info2.exitPoint-info2.entryPoint))); 
     
    //finalColor = mix(finalColor, refractionColor, 0.99);
    //finalColor.xyz *= exp(-absorbColor*length(info2.exitPoint-origin));
    finalColor = mix(finalColor, refractionColor, 0.99);
    //if(shadowTraced)finalColor = mix(shadowRes, finalColor, 0.5); 
    //float h = sphDensity(origin, direction,lightPos.xyz, 6,MAX_SCENE_BOUNDS);
    //if(h>0.0)finalColor = mix(finalColor,vec4(0.99,0.94,0.5,1),h); 
    //finalColor = mix(finalColor, info2.lighting,0.5); 
    //finalColor = pow(finalColor, vec4(1./2.2)); 
    
    //finalColor += volumeColor;
    finalColor = mix(finalColor, volumeColor, 0.5);
    //finalColor = pow(finalColor, vec4(1./2.2));
    imageStore(framebuffer, pix, finalColor);
}
