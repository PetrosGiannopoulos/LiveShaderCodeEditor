#version 430 core

#define MAX_SCENE_BOUNDS 10000.0

const float PI = 3.14159265359;
const float infinity = 1./0.;

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;
 
uniform samplerCube skybox;
uniform sampler2D diffuseTexture;
uniform sampler2D ssao;
uniform sampler2D shadowMap;
 
uniform vec4 sphere;
uniform vec4 cube;
uniform vec4 mirror;
uniform vec4 customModel;
uniform vec4 lightPos;
uniform mat4 lightProjection;
 
uniform float gScattering;
uniform float scatteringAmount;
uniform float time;

struct hitinfo {
    vec2 uv;
    float t;
    float t2;
    vec3 n;
    vec3 p;
 
    int type;
    int refl;
    int reflOrder;
    int refrType;
    vec4 e;
    vec4 color;
    vec4 lighting;
    vec3 entryPoint;
    vec3 exitPoint;
    float extraPath;
    vec3 pTIR;
    bool firstTIR;
    bool hasShadows;
};

//uv coordinates - Texture processing
vec2 uvSphere(vec3 p){
 
    float u = 0.5 + atan(p.z,p.x)/(2*PI);
    float v = 0.5 - asin(p.y)/PI;
 
    return vec2(u,v);
}
 
vec2 uvCube(vec3 p) {
 
    float absX = abs(p.x);
    float absY = abs(p.y);
    float absZ = abs(p.z);
 
    bool isXPositive = p.x > 0 ? true : false;
    bool isYPositive = p.y > 0 ? true : false;
    bool isZPositive = p.z > 0 ? true : false;
 
    float maxAxis, uc, vc;
 
    if (isXPositive && absX >= absY && absX >= absZ) {
        maxAxis = absX;
        uc = -p.z;
        vc = p.y;
    }
    if (!isXPositive && absX >= absY && absX >= absZ) {
        maxAxis = absX;
        uc = p.z;
        vc = p.y;
    }
    if (isYPositive && absY >= absX && absY >= absZ) {
        maxAxis = absY;
        uc = p.x;
        vc = -p.z;
    }
    if (!isYPositive && absY >= absX && absY >= absZ) {
        maxAxis = absY;
        uc = p.x;
        vc = p.z;
    }
    if (isZPositive && absZ >= absX && absZ >= absY) {
        maxAxis = absZ;
        uc = p.x;
        vc = p.y;
    }
    if (!isZPositive && absZ >= absX && absZ >= absY) {
        maxAxis = absZ;
        uc = -p.x;
        vc = p.y;
    }
    float u = 0.5 * (uc / maxAxis + 1.0);
    float v = 0.5 * (vc / maxAxis + 1.0);
    return vec2(u, v);
}
 
vec2 uvPlane(vec3 p, vec3 n){
 
    vec3 u = normalize(vec3(n.y, -n.x, 0));
    vec3 v = cross(n,u);
 
    float u_coord = dot(u, p);
    float v_coord = dot(v, p);
 
    return vec2(u_coord,v_coord);
 
}
