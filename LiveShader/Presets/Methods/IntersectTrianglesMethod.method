
float intersectTriangle(vec3 origin, vec3 ray, vec3 v0, vec3 v1, vec3 v2) {
    vec3 edge1 = v1 - v0;
    vec3 edge2 = v2 - v0;
    vec3 pvec = cross(ray, edge2);
    float det = dot(edge1, pvec);
    if (det <= 0)
        return -1.0;
    vec3 tvec = origin - v0;
    float u = dot(tvec, pvec);
    if (u < 0.0 || u > det)
        return -1.0;
    vec3 qvec = cross(tvec, edge1);
    float v = dot(ray, qvec);
    if (v < 0.0 || u + v > det)
        return -1.0;
    float invDet = 1.0 / det;
    float t = dot(edge2, qvec) * invDet;
    return t;
}
 
bool intersectTriangles(vec3 origin, vec3 dir, inout hitinfo info) {
    bool found = false;
    hitinfo tinfo;
    //tinfo.t = MAX_SCENE_BOUNDS;
 
    vec3 offset = vec3(0,-2.5,-30);
    uint numTris = sphereTris.length();
    for (int i = 0; i < numTris; i++) {
        
        const triangle tri = sphereTris[i];
        
        float t = intersectTriangle(origin, dir, tri.v1.xyz+customModel.xyz+offset, tri.v2.xyz+customModel.xyz+offset, tri.v3.xyz+customModel.xyz+offset);
        if (t >= 0.0 && t < info.t) {
            info.t = t;
            //info.t = tinfo.t;
            info.n = normalize(tri.n1.xyz);
            found = true;
            
        }
    }
    
 
    return found;
}
