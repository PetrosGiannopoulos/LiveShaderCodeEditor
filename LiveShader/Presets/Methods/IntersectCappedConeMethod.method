float dot2( in vec3 v ) { return dot(v,v); }

bool intersectCappedCone( in vec3  origin, in vec3  dir, 
                  in vec3  pa, in vec3  pb, 
                  in float ra, in float rb, inout hitinfo info )
{
    
    //pa: center point of top, pb: center point of bottom
    //ra: radius of top, rb: radius of bottom
 
    vec3  ba = pb - pa;
    vec3  oa = origin - pa;
    vec3  ob = dir - pb;
    
    float m0 = dot(ba,ba);
    float m1 = dot(oa,ba);
    float m2 = dot(ob,ba); 
    float m3 = dot(dir,ba);
 
    float t, t2; 
     
    //caps
    if( m1<0.0 ) { 
        if( dot2(oa*m3-dir*m1)<(ra*ra*m3*m3) ){
            t = -m1/m3;
            info.t = t;
            info.t2 = info.t;
            info.n = -ba*inversesqrt(m0);
            return true;//vec4(-m1/m3,-ba*inversesqrt(m0)); 
        }
    }
    else if( m2>0.0 ) { 
        if( dot2(ob*m3-dir*m2)<(rb*rb*m3*m3) ){
            t = -m2/m3;
            info.t = t;
            info.t2 = info.t;
            info.n = ba*inversesqrt(m0);
            return true;
            //return vec4(-m2/m3, ba*inversesqrt(m0)); 
        }
    }
    
    // body
    float m4 = dot(dir,oa);
    float m5 = dot(oa,oa);
    float rr = ra - rb;
    float hy = m0 + rr*rr;
    
    float k2 = m0*m0    - m3*m3*hy;
    float k1 = m0*m0*m4 - m1*m3*hy + m0*ra*(rr*m3*1.0        );
    float k0 = m0*m0*m5 - m1*m1*hy + m0*ra*(rr*m1*2.0 - m0*ra);
    
    float h = k1*k1 - k2*k0;
    if( h<0.0 ) return false;//vec4(-1.0);
 
    t = (-k1-sqrt(h))/k2;
     
    float y = m1 + t*m3;
    if( y>0.0 && y<m0) 
    {
        
            info.n = normalize(m0*(m0*(oa+t*dir)+rr*ba*ra)-ba*hy*y);
            //info.p = origin+dir*t; 
            info.t = t;
            return true; 
        //info.t2 = t2;     
        //info.n = normalize(m0*(m0*(oa+t*dir)+rr*ba*ra)-ba*hy*y);
        //info.p = origin+dir*t;
        
        //return vec4(t, normalize(m0*(m0*(oa+t*rd)+rr*ba*ra)-ba*hy*y));
    } 
    
    return false;//vec4(-1.0);
}