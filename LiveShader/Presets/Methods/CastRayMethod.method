vec4 castRay(vec3 origin, vec3 direction, inout hitinfo info, inout bool shadowTraced, inout vec4 shadowRes, inout vec4 volumeColor){
    bool hitAnything;// = false;
    bool lightTraced = false;
    vec4 pColor = vec4(0);
    vec3 lightColor = vec3(0.7);
    float shadowsVar = 0;
    vec4 rayEnergy = vec4(1);
    info.e = rayEnergy;
    vec4 accLighting = vec4(0);
    vec3 oEye = origin;
    vec4 finalColor = vec4(1);
    info.reflOrder = 1;
    info.color = vec4(0);
    info.extraPath = 0;
    info.firstTIR = true;
    info.lighting = vec4(vec3(0),1);
    float ph = 1e10;
   
    vec3 startPos = origin;
    vec3 startDir = direction;
    bool volumeBool = true; 
    info.t = MAX_SCENE_BOUNDS; 
    for(int i=0;i<8;i++){
        info.t = MAX_SCENE_BOUNDS;
        //info.t2 = MAX_SCENE_BOUNDS;
        //info.e = rayEnergy;
         
        vec4 color = trace(origin, direction, hitAnything, info);
        shadowTraced = false; 
        if(info.hasShadows){
          hitinfo pShadowInfo = info;
          pShadowInfo.t = MAX_SCENE_BOUNDS; 
          float res = 1.0;
          bool hasShadows = false;
          vec3 shadowPos = info.p+info.n*0.01;//info.p+info.n*0.01;
          vec3 shadowDir = normalize(lightPos.xyz-shadowPos);
          trace(shadowPos,shadowDir, hasShadows, pShadowInfo);
          vec3 mShadowPos; 
          float k = 2;
          float tmin = 0.1;
          float tmax = 100;
          float t = tmin;
          for(int j=0;j<32;j++){
              //shadowInfo.t = MAX_SCENE_BOUNDS;
              //mShadowPos = shadowPos+shadowDir*t;
              float h = map(shadowPos+shadowDir*t); 
              float y = h*h/(2*ph);
              if(j==0)y = 0.0;
              float d = sqrt(h*h-y*y);
              //res = min(res, k*(h/t));
              res = min(res, k*d/max(0.0,t-y));
              ph = h;
              
              t += h;
              if(res < 0.0001 || t>tmax)break; 
               
          }
          float pes = clamp(res,0.0,1.0);
          //shadowsVar = pes;
          if(hitAnything && pShadowInfo.type!=4){  
              shadowTraced = true;
              shadowRes = vec4(0);
              shadowsVar = pes;
              //volumeBool = false;
           } 
           
           //volumeColor += rayMarchedLighting(origin,direction, info, 0);
           
        }
        
        if(volumeBool){ 
            //volumeColor += rayMarchedLighting(startPos,startDir, info, shadowsVar);
            volumeBool = false;
        }
        else{
           volumeColor += rayMarchedLighting(origin,direction,info,0.0);
           volumeBool = true; 
        } 
        info.lighting = BlinnPhong(origin, direction, info.n, info.p, vec3(10), lightPos.xyz);
   
        vec4 pE = info.e; 
        //finalColor = shade(origin,direction, hitAnything,info);
        //origin = origin + direction*0.01;
        vec4 shadeColor = pE*shade(origin,direction,hitAnything, info);
        //vec4 lightingColor = pow(info.lighting*(1-shadowsVar),vec4(1./2.2));
         
        if(info.type!=6)info.color += shadeColor; 
        //info.color *= pow(info.lighting, vec4(1./2.2)); 
         
        //if(info.type!=6)info.color += volumeColor; 
         
        //if(info.type!=6)info.color = mix(info.color, (1-shadowsVar)*info.color*pow(info.lighting,vec4(1./2.2)),0.9);
        //if(info.type!=6)info.color = (1-shadowsVar)*info.color*info.lighting;
        if(shadowTraced==false && info.type!=6)info.color *= info.lighting; 
        else if(info.type!=6 && info.type!=3)info.color *= (info.lighting*(shadowsVar)); 
        //else if(info.type!=6 && info.type!=3)info.color*= mix(info.lighting,vec4(vec3(shadowsVar),1),0.4); 
        if(volumeBool==false){
            //volumeColor *= info.lighting;
            //volumeColor = mix(volumeColor, info.lighting,0.5); 
            //volumeBool = false; 
        } 
         
        //float h = sphDensity(startPos,startDir, lightPos.xyz, 3, MAX_SCENE_BOUNDS, info);
        //if(h>0.0)info.color = mix(info.color,vec4(0.99,0.94,0.5,1),h);  
        //if(info.type != 1 && info.type != 4)break; 
        if(!vany(info.e.xyz))break; 
        
    }
    
    return info.color;
}