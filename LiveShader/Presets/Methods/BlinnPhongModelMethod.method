
vec4 BlinnPhong(vec3 origin, vec3 dir, vec3 normal, vec3 fragPos, vec3 lightColor, vec3 lightPosition)
{
    normal = normalize(normal);
    // diffuse
    vec3 lightDir = normalize(lightPosition - fragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // specular
    vec3 viewDir = normalize(origin - fragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    //spec = pow(max(dot(normal, reflectDir), 0.0), 64.0);
    spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
    vec3 specular = spec * lightColor;    
    // simple attenuation
    //float max_distance = 1.5;
    float distance = length(lightPosition - fragPos);
    float attenuation = 1.0 / (distance*distance);
    
   // attenuation *= 10;//40.2;
    diffuse *= attenuation;
    specular *= attenuation;
    
     
    return vec4(diffuse + specular,0);
}
