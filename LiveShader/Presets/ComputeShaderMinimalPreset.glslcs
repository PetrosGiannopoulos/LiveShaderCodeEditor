#version 430 core
 
layout(binding = 0, rgba32f) uniform image2D framebuffer;
 
uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;
 
uniform samplerCube skybox;
uniform sampler2D diffuseTexture;
uniform sampler2D ssao;
uniform sampler2D shadowMap;
 
uniform vec4 sphere;
uniform vec4 cube;
uniform vec4 mirror;
uniform vec4 customModel;
uniform vec4 lightPos;
uniform mat4 lightProjection;
 
uniform float gScattering;
uniform float scatteringAmount;
uniform float time; 
 
struct box {
    vec3 min;
    vec3 max;
};
 
struct triangle {
  vec4 v1;
  vec4 v2;
  vec4 v3;
  vec4 n1;
  vec4 n2;
  vec4 n3;
};
 
#define NUM_BOXES 3
const box boxes[NUM_BOXES] = {
  /* The ground */
  {vec3(-50.0, -2.5-0.1, -50.0), vec3(50.0, -2.5, 50.0)},
  {vec3(-1, 20.0, 20-1), vec3(1, 22.0, 20+1)},
  {vec3(0), vec3(0)}
};
 
uniform int sphereTriangleSize;
layout(std430, binding = 1) buffer SphereTriangles {
    triangle sphereTris[];
};
 
#define MAX_SCENE_BOUNDS 10000.0
 
 
struct hitinfo {
    vec2 uv;
    float t;
    float t2;
    vec3 n;
    vec3 p;
 
    int type;
    int refl;
    int reflOrder;
    int refrType;
    vec4 e;
    vec4 color;
    vec4 lighting;
    vec3 entryPoint;
    vec3 exitPoint;
    float extraPath;
    vec3 pTIR;
    bool firstTIR;
    bool hasShadows;
};
 
int iPixel;
int numberPerPixel;
 
bool vany(vec3 v){
    if(v.x != 0 || v.y != 0 || v.z != 0)return true;
    return false; 
}
 
#define NUM_SAMPLES 10
  
layout (local_size_x = 32, local_size_y = 32) in;
 
//type: 0: plane,1: cube, 2: sphere, 3: sky, 4: mirror, 5: triangles, 6: light
 
void main(void) {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }
    vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
    vec2 pixel = vec2(pix);
    vec3 dir = normalize(mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x));
 
    bool hitAnything;
    hitinfo info;
    
    
    vec4 result = vec4(0);
    vec4 rayEnergy = vec4(1);
    info.e = rayEnergy;
    
    vec3 origin = eye;
    vec3 direction = dir;
    vec4 finalColor = vec4(1);
    vec4 shadowRes = vec4(0);
    bool shadowTraced = false;
 
    //reflection
    info.refl = 0;
    vec4 volumeColor = vec4(0);
    finalColor = castRay(origin, direction, info, shadowTraced, shadowRes, volumeColor);
 
    if(shadowTraced)finalColor = mix(shadowRes, finalColor, 0.5); 
    hitinfo info2;
    info2.e = rayEnergy;
    info2.refl = 1;
    shadowRes = vec4(0);
    shadowTraced = false;
    info2.refrType = 0;
    volumeColor = vec4(0);
    vec4 refractionColor = castRay(origin, direction, info2, shadowTraced, shadowRes, volumeColor); 
     
    finalColor = mix(finalColor, refractionColor, 0.99);
    
    finalColor = mix(finalColor, volumeColor, 0.5);
    finalColor.w = 1;
    if(volumeColor.xyz != vec3(0)){
        
        finalColor.w = 0;
    }
    
    imageStore(framebuffer, pix, finalColor);
}
