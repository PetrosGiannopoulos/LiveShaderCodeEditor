layout(binding = 0, rgba32f) uniform image2D framebuffer;
  
int iPixel;
int numberPerPixel;
 
vec3 hueShift( vec3 color, float hueAdjust ){

    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);
    const vec3  kRGBToI      = vec3 (0.596, -0.275, -0.321);
    const vec3  kRGBToQ      = vec3 (0.212, -0.523, 0.311);

    const vec3  kYIQToR     = vec3 (1.0, 0.956, 0.621);
    const vec3  kYIQToG     = vec3 (1.0, -0.272, -0.647);
    const vec3  kYIQToB     = vec3 (1.0, -1.107, 1.704);

    float   YPrime  = dot (color, kRGBToYPrime);
    float   I       = dot (color, kRGBToI);
    float   Q       = dot (color, kRGBToQ);
    float   hue     = atan (Q, I);
    float   chroma  = sqrt (I * I + Q * Q);

    hue += hueAdjust;

    Q = chroma * sin (hue);
    I = chroma * cos (hue);

    vec3    yIQ   = vec3 (YPrime, I, Q);

    return vec3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) )-0.08;

}

vec3 saturation(vec3 rgb, float adjustment)
{
    const vec3 W = vec3(0.2125, 0.7154, 0.0721);
    vec3 intensity = vec3(dot(rgb, W));
    return mix(intensity, rgb, adjustment);
}
 
vec3 background(in vec3 p)
{
    return vec3(length(p))*.25; 
} 
 
float model( in vec3 p )
{
   
    
    
    p.x += cos(time); 
    p.z += sin(time); 
    
    p.y *= .7;
    //p -= lightPos.xyz;
    float fireR = 0.8*p.y-1.;//+0.1*sin(time*0.7);
    //fireR*= 1.2;
    p -= lightPos.xyz;
    //twist
    float k = 10.0;
    float c = cos(k*p.y);
    float s = sin(k*p.y);
    mat2  m = mat2(c,-s,s,c);
    vec3  q = vec3(m*p.xz,p.y);
    p = q;

    float sphere_ = length(p)-fireR;
    float res = sphere_ + fnoise(p*1.5, time*3.)* .4;
    //displacement
    //res += sin(20*p.x)*sin(20*p.x)*sin(20*p.x)*0.08;
    
    
    return res*.8;
}

float raymarch(in vec3 ro, in vec3 rd)
{
    float dist = 0.;
    for(int i = 0; i < 30; i++)
    {
        float m = model(ro+rd*dist);
        dist += m;
        
        if(m < .01) return dist;
        //else if(dist > 2.) break;
    }
    return -1.;
}
 
vec3 volume(in vec3 p, in vec3 rd, in vec3 ld, in vec3 sp, in vec3 bg)
{
    vec3 op = p;
    float trans = 1.0;
    float td = 0.0;
    float dif = 0.0;
    float emit = 0.0;
    float steps = 40.; // increase to smooth
    
    // march
    for(float i = 0.; i < steps; i++)
    {
        float m = model(p);
        p += rd*.03;
        
        float dens = 1.-smoothstep(0., .35, -m);
        td += dens;
        trans *= dens;
        
        if(td > 1.0 && dif <= 0.)
        {
            td = 1.;
            dif = clamp(1. - model(p - .1*ld), 0., 1.);
            emit = pow(smoothstep(-.3, 0., model(p)), 4.);
        }
    }
    
    trans = (1.-pow(td/steps, 4.));
    trans = smoothstep(0., 0.6, trans);
    float emitmod = (emit*trans)*.8+.2;
    
    // light
    vec3 lin = vec3(.3, .2, .9);
    lin = hueShift(lin, 4.2 + -trans*.6 + dif*.5);
    lin *= emitmod;
    
    // bright/sat/contrast
    lin = saturation(lin, pow(trans, .5)*.4);
    lin *= 5.;
    lin -= vec3(.4);
    
    return mix(bg, lin, pow(trans, 1.25));
}
 
bool vany(vec3 v){
    if(v.x != 0 || v.y != 0 || v.z != 0)return true;
    return false; 
}
 
vec4 trace(inout vec3 origin, inout vec3 dir, out bool hitAnything, inout hitinfo i) {
    
    vec4 colorRes = vec4(0);
    hitAnything = false;
    //i.t = MAX_SCENE_BOUNDS;
    i.type = -1; 
    i.hasShadows = false; 
    
    if (intersectBoxes(origin,dir, i)) {
        hitAnything = true;
        vec3 po = origin+dir*i.t;
        vec2 boxUV = vec2(0);
        i.p = po; 
 
        if(i.type==1){
            i.n = normalize(po-cube.xyz-vec3(0,-2.5,-30));
            boxUV = uvCube(i.n);
            colorRes = texture(diffuseTexture, boxUV);
            
        }
        else if(i.type==4){
            boxUV = uvPlane(po, vec3(0,1,0))*0.1;
            i.n = vec3(-1,0,0);
            if(origin.x>po.x)i.n *= -1;
        }
        else{
            boxUV = uvPlane(po, vec3(0,1,0))*0.1;
            i.n = vec3(0,1,0);
            if(origin.y<po.y)i.n *= -1;
            i.type = 0;
            
        }
        i.hasShadows = true; 
        
        colorRes = texture(diffuseTexture,boxUV);
        
    }
      
    if(intersectTriangles(origin,dir,i)){
        hitAnything = true;
 
        vec3 po = origin+dir*i.t;
        i.p = po;
        i.type = 5;
        colorRes = vec4(0,0,1,1);
    }
     
     
     
    if(intersectSpheres(origin,dir,i)){
        hitAnything = true;
 
        //vec3 po = origin+dir*i.t;
        //i.p = po;
        i.type = 2;
        //i.n = normalize(po-sphere.xyz-vec3(0,-2.5,-30));
        vec2 uvsphr = uvSphere(i.n)*10;
        //colorRes = texture(diffuseTexture,uvsphr);
        colorRes = vec4(i.n*0.5+0.5,0);//vec4(1,0,0,1);
        //i.hasShadows = true;
        i.hasShadows = true;
        
    }
    //i.t = MAX_SCENE_BOUNDS;
    
    //light ball 
    if(IntersectSphere(origin, dir, i, vec4(lightPos.xyz,0.3))){
       hitAnything = true;
       vec3 po = origin+dir*i.t;
       i.p = po;
       i.n = normalize(po-lightPos.xyz);
       //colorRes = vec4(i.n*0.5+0.5,0);
       
       colorRes = vec4(0.99,0.94,0.5,1);
       i.type = 6;
       i.hasShadows = false; 
    }
     
    if(hitAnything == false)i.type = 3;
     
    i.color = colorRes; 
 
    return colorRes;
  
}
 
vec4 shade(inout vec3 origin, inout vec3 dir, in bool hitAnything, inout hitinfo i){
    vec4 finalColor;
    
    if(i.type == 3){ 
       //i.type = 3;
       i.e = vec4(vec3(1),1);
       finalColor = texture(skybox, dir);
       i.lighting = vec4(1);
       return finalColor; 
    } 
    vec3 inDir = dir;
    vec3 inPoint = i.p;
    vec4 ambient = vec4(0.7);
    //i.lighting = vec4(vec3(0),1); 
    //i.lighting += BlinnPhong(origin, dir, i.n, i.p, vec3(100), lightPos.xyz);
    //i.lighting += ambient; 
    
    vec4 albedo = vec4(0.8);
    vec4 specular = vec4(vec3(0.6),1);
    vec4 transmittance = vec4(vec3(0.9),1);
    if(i.type!= 0 && i.type!= 1 && i.type != 2 && i.type != 5 && i.type!= 6 && i.type!=7){
        origin = i.p;// + i.n * 0.01;
        
        dir = reflect(dir, i.n);
 
        origin = origin + dir*0.001;
        i.e *= specular;
    }
     
    if(i.type == 1|| i.type == 5){
        float ior = 1.125;
        float air = 1.00029;
        if(i.type==5)ior = 1.1921; 
        if(i.refl==1){
            origin = i.p+dir*0.001;
            
            //if(n1/n2*sin(theta1)>1) cannot refract 
            float fresnel; 
             
            if(i.reflOrder==1){
                fresnel = FresnelReflectAmount(air,ior,i.n,dir);
                if(fresnel<1){
                    dir = refract(dir, i.n, air/ior);
                    i.reflOrder = -1;
                    i.entryPoint = i.p;
                }
                else {
                    dir = reflect(dir,i.n);
                    i.pTIR = origin;
                    i.p -= dir*0.001;
                    i.extraPath += length(origin-i.p); 
                } 
            }
            else{
                fresnel = FresnelReflectAmount(ior,air,i.n,dir); 
                if(fresnel<1){
                    dir = refract(dir, i.n,ior/air);
                    i.reflOrder = 1; 
                    i.exitPoint = i.p;
                  
                }
                else {
                    dir = reflect(dir,i.n);
                    i.pTIR = origin;
                    i.p = i.p-dir*0.001;
                    i.extraPath += length(origin-i.p); 
                } 
            }
             
            if(fresnel<1)i.e *= transmittance;//(1-fresnel); 
        }
        else{
            origin = i.p+i.n*0.001;
            //dir = reflect(dir, i.n);
            float fresnel = FresnelReflectAmount(air,ior,i.n,dir);
            dir = reflect(dir, i.n);
            i.e *= specular;//fresnel;
            i.exitPoint = i.p;
        }
    }
 
    //i.lighting += BlinnPhong(origin, dir, i.n, i.p,vec3(1)); 
    float dif = clamp(dot(i.n,normalize(lightPos.xyz)),0,1); 
    finalColor = vec4(vec3(0),1);
    //i.lighting += BlinnPhong(origin, dir, i.n, i.p, vec3(1),lightPos.xyz); 
    //finalColor = vec4(vec3(0),1)*dif;
    //finalColor = clamp(dot(i.n, lightPos.xyz)*(-1),0,1)*lightPos.w*albedo;
 
    return finalColor;
}
 
 
vec4 castRay(vec3 origin, vec3 direction, inout hitinfo info, inout bool shadowTraced, inout vec4 shadowRes, inout vec4 volumeColor){
    bool hitAnything;// = false;
    bool lightTraced = false;
    vec4 pColor = vec4(0);
    vec3 lightColor = vec3(0.7);
    float shadowsVar = 0;
    vec4 rayEnergy = vec4(1);
    info.e = rayEnergy;
    vec4 accLighting = vec4(0);
    vec3 oEye = origin;
    vec4 finalColor = vec4(1);
    info.reflOrder = 1;
    info.color = vec4(0);
    info.extraPath = 0;
    info.firstTIR = true;
    info.lighting = vec4(vec3(0),1);
    float ph = 1e10;
   
    vec3 startPos = origin;
    vec3 startDir = direction;
    bool volumeBool = true; 
    info.t = MAX_SCENE_BOUNDS; 
    for(int i=0;i<8;i++){
        info.t = MAX_SCENE_BOUNDS;
        //info.t2 = MAX_SCENE_BOUNDS;
        //info.e = rayEnergy;
         
        vec4 color = trace(origin, direction, hitAnything, info);
        shadowTraced = false; 
        if(info.hasShadows){
          hitinfo pShadowInfo = info;
          pShadowInfo.t = MAX_SCENE_BOUNDS; 
          float res = 1.0;
          bool hasShadows = false;
          vec3 shadowPos = info.p+info.n*0.01;//info.p+info.n*0.01;
          vec3 shadowDir = normalize(lightPos.xyz-shadowPos);
          trace(shadowPos,shadowDir, hasShadows, pShadowInfo);
          vec3 mShadowPos; 
          float k = 2;
          float tmin = 0.1;
          float tmax = 100;
          float t = tmin;
          for(int j=0;j<32;j++){
              //shadowInfo.t = MAX_SCENE_BOUNDS;
              //mShadowPos = shadowPos+shadowDir*t;
              float h = map(shadowPos+shadowDir*t); 
              float y = h*h/(2*ph);
              if(j==0)y = 0.0;
              float d = sqrt(h*h-y*y);
              //res = min(res, k*(h/t));
              res = min(res, k*d/max(0.0,t-y));
              ph = h;
              
              t += h;
              if(res < 0.0001 || t>tmax)break; 
               
          }
          float pes = clamp(res,0.0,1.0);
          //shadowsVar = pes;
          if(hitAnything && pShadowInfo.type!=4){  
              shadowTraced = true;
              shadowRes = vec4(0);
              shadowsVar = pes;
              //volumeBool = false;
           } 
           
           //volumeColor += rayMarchedLighting(origin,direction, info, 0);
           
        }
        
        if(volumeBool){ 
            //volumeColor += rayMarchedLighting(startPos,startDir, info, shadowsVar);
            volumeBool = false; 
 
        }
        else{
           //volumeColor += rayMarchedLighting(origin,direction,info,0.0);
           
            
 
 
           
           volumeBool = true; 
        } 
        info.lighting = BlinnPhong(origin, direction, info.n, info.p, vec3(10), lightPos.xyz);
   
        vec4 pE = info.e; 
        //finalColor = shade(origin,direction, hitAnything,info);
        //origin = origin + direction*0.01;
        vec4 shadeColor = pE*shade(origin,direction,hitAnything, info);
        //vec4 lightingColor = pow(info.lighting*(1-shadowsVar),vec4(1./2.2));
         
        if(info.type!=6)info.color += shadeColor; 
        //info.color *= pow(info.lighting, vec4(1./2.2)); 
         
        //if(info.type!=6)info.color += volumeColor; 
         
        //if(info.type!=6)info.color = mix(info.color, (1-shadowsVar)*info.color*pow(info.lighting,vec4(1./2.2)),0.9);
        //if(info.type!=6)info.color = (1-shadowsVar)*info.color*info.lighting;
        if(shadowTraced==false && info.type!=6)info.color *= info.lighting; 
        else if(info.type!=6 && info.type!=3)info.color *= (info.lighting*(shadowsVar)); 
        //else if(info.type!=6 && info.type!=3)info.color*= mix(info.lighting,vec4(vec3(shadowsVar),1),0.4); 
        if(volumeBool==false){
            //volumeColor *= info.lighting;
            //volumeColor = mix(volumeColor, info.lighting,0.5); 
            //volumeBool = false; 
        } 
         
        //float h = sphDensity(startPos,startDir, lightPos.xyz, 3, MAX_SCENE_BOUNDS, info);
        //if(h>0.0)info.color = mix(info.color,vec4(0.99,0.94,0.5,1),h);  
        //if(info.type != 1 && info.type != 4)break; 
        if(!vany(info.e.xyz))break; 
        
    }
    
    return info.color;
} 
 
#define NUM_SAMPLES 10
  
layout (local_size_x = 32, local_size_y = 32) in;
 
//type: 0: plane,1: cube, 2: sphere, 3: sky, 4: mirror, 5: triangles, 6: light
 
void main(void) {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }
    vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
    vec2 pixel = vec2(pix);
    vec3 dir = normalize(mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x));
 
    bool hitAnything;
    hitinfo info;
    
    
    vec4 result = vec4(0);
    vec4 rayEnergy = vec4(1);
    info.e = rayEnergy;
    
    vec3 origin = eye;
    vec3 direction = dir;
    vec4 finalColor = vec4(1);
    vec4 shadowRes = vec4(0);
    bool shadowTraced = false;
 
    //reflection
    info.refl = 0;
    vec4 volumeColor = vec4(0);
    finalColor = castRay(origin, direction, info, shadowTraced, shadowRes, volumeColor);
 
    if(shadowTraced)finalColor = mix(shadowRes, finalColor, 0.5); 
    hitinfo info2;
    info2.e = rayEnergy;
    info2.refl = 1;
    shadowRes = vec4(0);
    shadowTraced = false;
    info2.refrType = 0;
    volumeColor = vec4(0);
    vec4 refractionColor = castRay(origin, direction, info2, shadowTraced, shadowRes, volumeColor); 
     
    finalColor = mix(finalColor, refractionColor, 0.99);
    
    
    
    
    
    
    finalColor = mix(finalColor, volumeColor, 0.5);
    finalColor.w = 1;
    if(volumeColor.xyz != vec3(0)){
        
        finalColor.w = 0;
    }
     
    
    float dist = raymarch(origin, direction);
    vec3 ld = vec3(-1.,1.,0.); 
    if(dist>0.){ 
        finalColor = vec4(volume(origin+direction*dist,direction,ld,lightPos.xyz,finalColor.xyz), 1.0);
    } 
 
 
 
    
    imageStore(framebuffer, pix, finalColor);
}
